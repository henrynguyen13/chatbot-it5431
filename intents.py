import re
import pandas as pd


def detect_intent(query: str) -> str:
    """Ph√°t hi·ªán intent t·ª´ c√¢u h·ªèi ng∆∞·ªùi d√πng v·ªõi ƒë·ªô ch√≠nh x√°c cao h∆°n"""
    query = query.lower().strip()

    # Intent ch√†o h·ªèi
    if re.match(
            r"^(hi|hello|hey|greetings|good morning|good afternoon|good evening|what's up|sup|yo|hi there|hi chatbot|hi laptop bot)",
            query):
        return "greeting"

    # Intent c·∫£m ∆°n
    elif re.match(r"^(thanks|thank you|thank you so much|appreciate it|cheers|nice one)", query):
        return "thanks"

    # Intent t·∫°m bi·ªát
    elif re.match(r"^(bye|goodbye|see you|farewell|cya|exit|quit|close|stop|end)", query):
        return "goodbye"

    # Intent gi·ªõi thi·ªáu b·∫£n th√¢n
    elif re.match(r"^(who are you|what are you|introduce yourself|tell me about yourself|your name|what is your name)",
                  query):
        return "self_introduction"

    # Intent h·ªèi ch·ª©c nƒÉng
    elif re.match(
            r"^(what can you do|how can you help|your capabilities|what do you do|help me|assist me|support|your purpose)",
            query):
        return "capabilities"
    elif re.search(r'\bcompare\b', query):
        return "compare"

    # Intent t√¨m ki·∫øm - ph√°t hi·ªán c√°c t·ª´ kh√≥a li√™n quan ƒë·∫øn laptop v√† th√¥ng s·ªë k·ªπ thu·∫≠t
    laptop_keywords = [
        "laptop", "notebook", "computer", "pc", "device",
        "recommend", "suggest", "find", "search", "looking for",
        "buy", "purchase", "need", "want", "choose", "select",
        "spec", "specs", "specification", "configuration",
        "ram", "memory", "storage", "ssd", "hdd", "gb",
        "processor", "cpu", "gpu", "graphics", "screen", "display",
        "price", "cost", "budget", "usd", "dollar", "under", "below", "over", "above", "vnd"
        "brand", "model", "dell", "hp", "lenovo", "asus", "apple", "acer", "msi"
    ]

    # Ph√°t hi·ªán s·ªë k√®m theo ƒë∆°n v·ªã (8GB, 500GB, $1000, etc.)
    has_spec_numbers = re.search(r'\b(\d+\s*(gb|gb ram|ram|ssd|hdd|tb|usd|vnd|\$))\b', query)

    # Ph√°t hi·ªán t·ª´ kh√≥a li√™n quan ƒë·∫øn laptop
    has_laptop_keyword = any(keyword in query for keyword in laptop_keywords)

    # Ph√°t hi·ªán c·∫•u tr√∫c c√¢u h·ªèi t√¨m ki·∫øm ƒëi·ªÉn h√¨nh
    has_search_pattern = re.search(r'(laptop|notebook).*(for|with|under|around|that)', query)

    if has_spec_numbers or has_laptop_keyword or has_search_pattern:
        return "search"

    # Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c intent
    return "unknown"


def handle_intent(intent: str, user_request: str = "") -> str:
    """X·ª≠ l√Ω intent v√† tr·∫£ v·ªÅ ph·∫£n h·ªìi ph√π h·ª£p"""
    responses = {
        "greeting": "Hello! I'm your laptop shopping assistant. ü§ñ How can I help you find the perfect laptop today?",
        "thanks": "You're welcome! üòä If you need more help finding a laptop, just let me know!",
        "goodbye": "Goodbye! üëã Feel free to come back if you need laptop recommendations anytime!",
        "self_introduction": "I'm a specialized AI assistant for laptop recommendations. My job is to help you find the perfect laptop based on your needs, budget, and preferences!",
        "capabilities": "I can help you:\n- Find laptops matching your budget üí∞\n- Recommend laptops for specific uses (gaming, work, etc.) üéÆüíº\n- Compare laptop specifications üìä\n- Suggest the best value laptops ‚≠ê\n\nJust tell me what you're looking for!",
        "unknown": "I'm here to help you find the perfect laptop! üöÄ Could you tell me what kind of laptop you're looking for?"
    }

    return responses.get(intent, responses["unknown"])

def handle_compare(user_request: str, df: pd.DataFrame) -> str:
    # Expect ‚ÄúCompare Dell XPS 13 and MacBook Air‚Äù
    match = re.search(
        r'compare\s+(.+?)\s+(?:and|with|vs)\s+(.+)', 
        user_request, re.IGNORECASE
    )
    if not match:
        return ("Please specify two laptops, e.g. ‚ÄúCompare Dell XPS 13 and MacBook Air.‚Äù")
    name1, name2 = match.group(1).strip(), match.group(2).strip()

    row1 = df[df['Laptop'].str.contains(name1, case=False)]
    row2 = df[df['Laptop'].str.contains(name2, case=False)]
    if row1.empty or row2.empty:
        return "One or both models weren‚Äôt found in our dataset."

    def specs(r):
        return {
            "CPU": r['CPU'],
            "RAM": f"{r['RAM']}GB",
            "Storage": f"{r['Storage']}GB {r['Storage type']}",
            "GPU": r['GPU'],
            "Screen": f"{r['Screen']}\" {'Touchscreen' if r['Touch']=='Yes' else 'Non-Touch'}",
            "Price": f"${r['Final Price']}"
        }
    s1, s2 = specs(row1.iloc[0]), specs(row2.iloc[0])

    lines = [f"**{row1.iloc[0]['Laptop']}** vs **{row2.iloc[0]['Laptop']}**"]
    for k in s1:
        lines.append(f"- **{k}:** {s1[k]}  |  {s2[k]}")
    return "\n".join(lines)
